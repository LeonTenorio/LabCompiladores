ID: fmenos   SCOPE: fibonacciDATA TYPE: int  TYPE ID: var  LINES: 11 10 7 4                        MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: input    SCOPE:         DATA TYPE: int  TYPE ID: func LINES: 0                                MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 1   VARS: [val]
ID: val      SCOPE: output  DATA TYPE: int  TYPE ID: var  LINES: 20                               MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: c        SCOPE: fibonacciDATA TYPE: int  TYPE ID: var  LINES: 13 13 8 5 2                      MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: fn       SCOPE: fibonacciDATA TYPE: int  TYPE ID: var  LINES: 15 12 12 11 6 3                  MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: aux      SCOPE: fibonacciDATA TYPE: int  TYPE ID: var  LINES: 12 10 9                          MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: val      SCOPE: input   DATA TYPE: int  TYPE ID: var  LINES: 20                               MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: main     SCOPE:         DATA TYPE: void TYPE ID: func LINES: 18                               MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   VARS: []
ID: n        SCOPE: fibonacciDATA TYPE: int  TYPE ID: var  LINES: 8 1                              MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   REG: mem[ ]
ID: output   SCOPE:         DATA TYPE: void TYPE ID: func LINES: 19 0                             MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 1   VARS: [val]
ID: GLOBAL   SCOPE:         DATA TYPE: void TYPE ID: func LINES: 0                                MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 0   VARS: []
ID: fibonacciSCOPE:         DATA TYPE: int  TYPE ID: func LINES: 19 1                             MEMLOC: 0      MEMPOS: -1     VARAMOUNT: 4   VARS: [c, fn, fmenos, aux]
