ÁRVORE SINTÁTICA
Diferenciar todas as operações de uma forma minuciona
Tinha um detalhe esquecido na disciplina anterior, AtrK não estava sendo utilizado e estava agrupado com OpK, mas digamos que toda vez que a conversão para quadruplas olha um OpK instancia temporários para esse operando, mas em atribuições isso não é necesário, para não precisar de um if, e visto que temos esse nó, foi habilitado

TABELA DE SÍMBOLOS
Foi necessário acrescentar informações, posicionamento de memória, alocação de memória, tipo de IntPointer, flag pra verificar se a variável está em registrador, lista de variáveis para uma função, tudo isso para o gerenciamento de memória que será/é (finalizando desenvolvimento) no ASSEMBLY
**Necessária uma correção na saída dos dados dessa tabela de símbolos na forma com que os registradores estão saindo para cada variável depois do ASSEMBLY

QUADRUPLAS
Nenhuma alocação de memória, apenas as operações genéricas feitas e linearizadas da árvore sintática

ASSEMBLY
Manter a memória do mesmo jeito antes e depois da chamada de função
Os argumentos de função são passados na memória principal do fim para o começo, utilizando o registrador $ra 
Na chamada de função são empilhados os registradores $sN usados
É empilhado também o registrador $sp

No início de função é empilhado o registrador $ra para no final da função dar um BR para ele
Logo depois, é atribuido a $gp o valor de $sp 
$sp serve como ponteiro de topo de pilha para alocacao apenas de memória
Para acesso na memória principal é utilizado $gp com o deslocamento necessário

62209 - Tamanho da memoria RAM utilizada

getRegisterLikeRead apenas usar um unico temporario
getRegisterLikeWrite apenas usar um unico temporario
storeStackElement usar mais um temporario para as operacoes
Tudo isso me resulta em um uso maximo de 4 temporarios para load e store

PARAMETROS PARA SELECIONAR OS MODOS DE EXECUÇÃO DO COMPILADOR
inputName="NOME DO ARQUIVO DE ENTRADA", se não presente é utilizado "entrada.txt"
outSufix="SUFIXO", utilizado como final do nome dos arquivos de saída na pasta outputs
debug=BOOLEANA, alterna entre modo de debug no ASSEMBLY ou não
                debug=true: A saída ASSEMBLY terá linhas comentando cada conversão de quadruplas para ASSEMBLY, bem como algumas outras informações relacionadas com acesso a memória. Com isso, o compilador não irá executar o código binário dessa entrada
                debug=false: A saída BINARY será habilitada e não teremos linhas de comentários no código ASSEMBLY
quartus=BOOLEANA, alterna entre o modo de código binário puro ou a forma já preparada para copiar e colar dentro da memória de instruções do compilador